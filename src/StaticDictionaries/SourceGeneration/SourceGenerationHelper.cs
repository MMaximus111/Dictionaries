using System.Text;
using Microsoft.CodeAnalysis.CSharp;

namespace StaticDictionaries.SourceGeneration;

internal static class SourceGenerationHelper
{
    private const string IdPropertyName = "Id";
    private const string NamePropertyName = "Name";

    private const string Header = @"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the StaticDictionaries source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable";

    public static string GenerateExtensionClass(StringBuilder sb, EnumDictionaryToGenerate dictionaryToGenerate)
    {
        List<string> propertyNames = dictionaryToGenerate.PropertyNames.ToList();

        GenerateHeader(dictionaryToGenerate, sb);

        GenerateLengthProperty(dictionaryToGenerate, sb);

        AddIdAndNamePropertiesIfTheNotExists(dictionaryToGenerate, propertyNames);

        GenerateMinAndMaxProperties(dictionaryToGenerate, sb);

        GeneratePropertiesMethods(dictionaryToGenerate, sb, propertyNames);

        GenerateGetByIdMethod(dictionaryToGenerate, sb, propertyNames);

        GenerateXmlMethod(dictionaryToGenerate, sb, propertyNames);

        GenerateJsonMethod(dictionaryToGenerate, sb, propertyNames);

        GenerateAllMethod(dictionaryToGenerate, sb);

        return sb.ToString();
    }

    private static string ToLiteral(object value)
    {
        return SymbolDisplay.FormatPrimitive(value, true, false);
    }

    private static void GenerateGetByIdMethod(EnumDictionaryToGenerate dictionaryToGenerate, StringBuilder sb, List<string> propertyNames)
    {
        sb.AppendLine(@"
        /// <summary>
        /// Generated method by StaticDictionaries.
        /// </summary>
        /// <returns>Enum member by id.</returns>");
        sb.AppendLine(@$"public static {dictionaryToGenerate.Name} GetById(int id)");
        sb.AppendLine("{");

        int idPropertyPosition = propertyNames.IndexOf(IdPropertyName);

        foreach (EnumMemberDefinition? member in dictionaryToGenerate.Members)
        {
            sb.AppendLine($"if (id == {member.Values[idPropertyPosition]})");
            sb.AppendLine($"return {dictionaryToGenerate.Name}.{member.MemberName};");
        }

        sb.AppendLine("return default;");

        sb.AppendLine("}");

        sb.AppendLine();
    }

    private static void GenerateXmlMethod(EnumDictionaryToGenerate dictionaryToGenerate, StringBuilder sb, IReadOnlyList<string> propertyNames)
    {
        if (!dictionaryToGenerate.XmlSupport)
        {
            return;
        }

        sb.AppendLine(@"
        /// <summary>
        /// Generated method by StaticDictionaries.
        /// </summary>
        /// <returns>Serialized enum in XML format.</returns>");
        sb.AppendLine(@"public static string Xml()");
        sb.AppendLine("{");

        StringBuilder xmlBuilder = new StringBuilder();

        xmlBuilder.AppendLine(@"<?xml version=""1.0"" encoding=""UTF-8""?>");
        xmlBuilder.AppendLine("  <root>");

        foreach (EnumMemberDefinition? member in dictionaryToGenerate.Members)
        {
            xmlBuilder.AppendLine($"    <{member.MemberName}>");

            int i = 0;

            foreach (object? memberValue in member.Values)
            {
                string propertyName = propertyNames[i];

                xmlBuilder.AppendLine($"      <{propertyName}>{memberValue}</{propertyName}>");

                i++;
            }

            xmlBuilder.AppendLine($"    </{member.MemberName}>");
        }

        xmlBuilder.AppendLine("  </root>");

        sb.AppendLine($@"return {ToLiteral(xmlBuilder.ToString())};");

        sb.AppendLine("}");

        sb.AppendLine();
    }

    private static void GenerateJsonMethod(EnumDictionaryToGenerate dictionaryToGenerate, StringBuilder sb, IReadOnlyList<string> propertyNames)
    {
        if (!dictionaryToGenerate.JsonSupport)
        {
            return;
        }

        sb.AppendLine(@"
        /// <summary>
        /// Generated method by StaticDictionaries.
        /// </summary>
        /// <returns>Serialized enum in JSON format.</returns>");
        sb.AppendLine(@"public static string Json()");
        sb.AppendLine("{");

        StringBuilder jsonBuilder = new StringBuilder();

        jsonBuilder.AppendLine("[");

        string jsonItems = string.Join(",\n", dictionaryToGenerate.Members.Select(x =>
        {
            StringBuilder jsonItemBuilder = new StringBuilder();

            jsonItemBuilder.AppendLine("  {");

            int i = 0;

            foreach (object? memberValue in x.Values)
            {
                string propertyName = propertyNames[i];

                jsonItemBuilder.AppendLine(@$"    ""{propertyName}"": {ToLiteral(memberValue ?? "null")},");

                i++;
            }

            jsonItemBuilder.Append("  }");

            return jsonItemBuilder.ToString();
        }));

        jsonBuilder.Append(jsonItems);

        jsonBuilder.AppendLine("]");

        sb.AppendLine($@"return {ToLiteral(jsonBuilder.ToString())};");

        sb.AppendLine("}");

        sb.AppendLine();
    }

    private static void GenerateAllMethod(EnumDictionaryToGenerate dictionaryToGenerate, StringBuilder sb)
    {
        sb.AppendLine(@"
        /// <summary>
        /// Generated method by StaticDictionaries.
        /// </summary>
        /// <returns>Array of all enum members.</returns>");
        sb.AppendLine($@"public static {dictionaryToGenerate.Name}[] All()");
        sb.AppendLine("{");
        sb.AppendLine("return new[]");
        sb.AppendLine("{");

        foreach (EnumMemberDefinition? member in dictionaryToGenerate.Members)
        {
            sb.Append(dictionaryToGenerate.Name).Append('.').Append(member.MemberName).Append(",");
            sb.AppendLine();
        }

        sb.AppendLine("};");
        sb.Append("}");

        sb.Append(@"
    }");
        if (!string.IsNullOrEmpty(dictionaryToGenerate.Namespace))
        {
            sb.Append(@"
}");
        }
    }

    private static void GeneratePropertiesMethods(EnumDictionaryToGenerate dictionaryToGenerate, StringBuilder sb, IReadOnlyCollection<string> propertyNames)
    {
        int i = 0;
        foreach (string propertyName in propertyNames)
        {
            Type type = dictionaryToGenerate.PropertyTypes[i];

            sb.AppendLine(@"
        /// <summary>
        /// Generated method by StaticDictionaries.
        /// </summary>
        /// <returns>Value for defined property.</returns>");

            sb.AppendLine(@$"public static {type.Name} {propertyName}(this {dictionaryToGenerate.Name} member)");
            sb.Append("{");
            sb.AppendLine();

            foreach ((string MemberName, object value) property in dictionaryToGenerate.Members.Select(x => (x.MemberName, x.Values[i]!)))
            {
                sb.AppendLine($"if (member == {dictionaryToGenerate.Name}.{property.MemberName})");
                sb.AppendLine($"return {ToLiteral(property.value)};");
            }

            sb.AppendLine("return default;");
            sb.AppendLine("}");
            sb.AppendLine();

            i++;
        }

        sb.AppendLine();
    }

    private static void AddIdAndNamePropertiesIfTheNotExists(EnumDictionaryToGenerate dictionaryToGenerate, ICollection<string> propertyNames)
    {
        bool idPropertyDefined = dictionaryToGenerate.PropertyNames.Contains(IdPropertyName);
        bool namePropertyDefined = dictionaryToGenerate.PropertyNames.Contains(NamePropertyName);

        if (!idPropertyDefined)
        {
            propertyNames.Add(IdPropertyName);

            dictionaryToGenerate.PropertyTypes.Add(typeof(int));

            foreach (EnumMemberDefinition member in dictionaryToGenerate.Members)
            {
                member.Values.Add(member.Id);
            }
        }

        if (!namePropertyDefined)
        {
            dictionaryToGenerate.PropertyTypes.Add(typeof(string));

            propertyNames.Add(NamePropertyName);

            foreach (EnumMemberDefinition member in dictionaryToGenerate.Members)
            {
                member.Values.Add(member.MemberName);
            }
        }
    }

    private static void GenerateMinAndMaxProperties(EnumDictionaryToGenerate dictionaryToGenerate, StringBuilder sb)
    {
        sb.Append(@"
    /// <summary>
    /// Max id of enum.
    /// Returns identifier of member that cannot be overridden by attribute arguments.
    /// </summary>
    public const int MaxId = ").Append(dictionaryToGenerate.Members.Max(x => x.Id)).Append(";");

        sb.AppendLine();

        sb.Append(@"
    /// <summary>
    /// Min id of enum.
    /// Returns identifier of member that cannot be overridden by attribute arguments.
    /// </summary>
    public const int MinId = ").Append(dictionaryToGenerate.Members.Min(x => x.Id)).Append(";");

        sb.AppendLine();
    }

    private static void GenerateLengthProperty(EnumDictionaryToGenerate dictionaryToGenerate, StringBuilder sb)
    {
        sb.Append(@"
        /// <summary>
        /// The number of members in the enum.
        /// This is a non-distinct count of defined names.
        /// </summary>");
        sb.AppendLine();
        sb.Append("    ");
        sb.AppendLine(@$"public const int Length = {dictionaryToGenerate.Members.Count};");

        sb.AppendLine();
    }

    private static void GenerateHeader(EnumDictionaryToGenerate dictionaryToGenerate, StringBuilder sb)
    {
        sb
            .Append(Header)
            .Append(@"
using System;

");
        if (!string.IsNullOrEmpty(dictionaryToGenerate.Namespace))
        {
            sb.Append(@"
namespace ").Append(dictionaryToGenerate.Namespace).Append(@"
{");
        }

        sb.Append(@"
    ").Append(dictionaryToGenerate.IsPublic ? "public" : "internal").Append(@" static partial class ").Append($"{dictionaryToGenerate.Name}Extensions").Append(@"
    {");
    }
}