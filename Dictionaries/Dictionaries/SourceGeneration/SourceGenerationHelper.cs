using System.Reflection;
using System.Text;
using Dictionaries;

namespace Dictionaries.SourceGeneration;

public static class SourceGenerationHelper
{
    private const string Header = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Dictionaries source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable";

    public static string GenerateExtensionClass(StringBuilder sb, DictionaryToGenerate dictionaryToGenerate)
    {
        sb
            .Append(Header)
            .Append(@"
#if NETCOREAPP && !NETCOREAPP2_0 && !NETCOREAPP1_1 && !NETCOREAPP1_0
using System;
#endif
");
        if (!string.IsNullOrEmpty(dictionaryToGenerate.Namespace))
        {
            sb.Append(@"
namespace ").Append(dictionaryToGenerate.Namespace).Append(@"
{");
        }

        sb.Append(@"
    ").Append(dictionaryToGenerate.IsPublic ? "public" : "internal").Append(@" static partial class ").Append(dictionaryToGenerate.Name).Append(@"
    {
        /// <summary>
        /// The number of members in the enum.
        /// This is a non-distinct count of defined names.
        /// </summary>
        public const int Length = ").Append(dictionaryToGenerate.Properties.Count).Append(";");

        sb.Append(@$"public static {dictionaryToGenerate.FullyQualifiedName} GetById(int id)");
        sb.Append(@" => value switch {");

        foreach (DictionaryBase property in dictionaryToGenerate.Properties)
        {
            sb.Append(@"").Append(property.Id);
            sb.Append(" => ");
            sb.Append('"').Append(dictionaryToGenerate.FullyQualifiedName).Append(@""",");
        }

        sb.Append(@"
        public static string[] GetNames()
        {
            return new[]
            {");
        foreach (DictionaryBase property in dictionaryToGenerate.Properties)
        {
            sb.Append(@"nameof(").Append(dictionaryToGenerate.FullyQualifiedName).Append('.').Append(property.Name).Append("),");
        }

        sb.Append(@"
            };
        }
    }");
        if (!string.IsNullOrEmpty(dictionaryToGenerate.Namespace))
        {
            sb.Append(@"
}");
        }

        return sb.ToString();
    }
}